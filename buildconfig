#-
# ==========================================================================
# Copyright 2012 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk
# license agreement provided at the time of installation or download,
# or which otherwise accompanies this software in either electronic
# or hard copy form.
# ==========================================================================
#+

# If you have Maya installed in a non-standard location, uncomment the
# following line and set the path to the 'Maya.app/Contents' directory of
# your Maya installation:
# MAYA_LOCATION = /my/path/to/Maya.app/Contents
# export MAYA_LOCATION

# Make sure these are in your path.
CC          = clang
CXX         = clang++
LD          = clang++

# By default, we will try to build a universal binary to match the same
# architectures as the installed Maya binary. If you only want one specific
# architecture (e.g i386 or x86_64) then set it below.
PREFERRED_ARCHITECTURE    =

ifneq ($(MAKECMDGOALS), clean)
    #-------------------------------------------------------------
    #
    #       Try to find Maya
    #
    #-------------------------------------------------------------
    ifeq ($(MAYA_LOCATION),)
        MAYA_LOCATION = /Applications/Autodesk/maya$(mayaVersion)/Maya.app/Contents
        # downloaded devkit can be located outside of Maya install tree
        ifeq ($(DEVKIT_LOCATION),)
            DEVKIT = $(MAYA_LOCATION)/../../devkit
            DEVKIT_LOCATION = $(MAYA_LOCATION)/../../include
        else
            DEVKIT = $(DEVKIT_LOCATION)
            DEVKIT_INCLUDE = $(DEVKIT)/include
        endif

        ifeq ($(wildcard $(DEVKIT_INCLUDE)/maya/MTypes.h),)
            $(error Cannot find Maya ${mayaVersion}. Please uncomment the \
                    MAYA_LOCATION setting near the top of 'buildconfig' and set \
                    it to point to the Maya.app/Contents directory of your \
                    Maya ${mayaVersion} installation)
        endif
    else
        ifneq ($(DEVKIT_LOCATION),)
            DEVKIT = $(DEVKIT_LOCATION)
            DEVKIT_INCLUDE = $(DEVKIT)/include
        else ifneq ($(wildcard $(MAYA_LOCATION)/../../include/maya/MTypes.h),)
            DEVKIT = $(MAYA_LOCATION)/../../devkit
            DEVKIT_INCLUDE = $(MAYA_LOCATION)/../../include
        else
            $(error The MAYA_LOCATION environment variable does not point to the \
                    directory where Maya is installed)
        endif

        # Make sure that MAYA_LOCATION is pointing at the correct version of
        # Maya.
        #
        # Matching subversions (e.g. 2013.5) is not possible without a lookup
        # table, so if this is a sub-version then just make sure that we've
        # got the right base version. Not perfect, but better than nothing.
        baseMayaVersion := $(shell echo $(mayaVersion) | sed 's/\..*//')

        apiVersion := $(shell grep 'define.*MAYA_API_VERSION' $(DEVKIT_INCLUDE)/maya/MTypes.h | sed 's/^[^0-9]*\([0-9]...\).*$$/\1/')

    endif

    DEVKIT_ALEMBIC_INCDIR = $(DEVKIT)/Alembic/include
    DEVKIT_ALEMBIC_LIBDIR = $(DEVKIT)/Alembic/lib

    # Determine the architectures to build.
    ARCH_FLAGS =
    MAYABIN = ${MAYA_LOCATION}/bin/maya
    MAYA_ARCHES = $(shell lipo -info $(MAYABIN) | sed 's/^.*://')

    ifneq ($(PREFERRED_ARCHITECTURE),)
        ifneq ($(filter $(PREFERRED_ARCHITECTURE),$(MAYA_ARCHES)),)
            ARCH_FLAGS = -arch $(PREFERRED_ARCHITECTURE)
        else
            $(error $(MAYABIN) does not support the '$(PREFERRED_ARCHITECTURE)' architecture.)
        endif
    else
        ARCH_FLAGS = $(patsubst %,-arch %,$(MAYA_ARCHES))
    endif

    # Settings, added several extra flags
    CFLAGS        = -DCC_GNU_ -DOSMac_ -DOSMacOSX_ $(EXTRA_ARCH_FLAG)\
                    -DOSMac_MachO_ -O3 $(ARCH_FLAGS)  -D_LANGUAGE_C_PLUS_PLUS\
                    -mmacosx-version-min=10.8
    C++FLAGS      = $(CFLAGS) $(CXX_LIB_FLAG) $(WARNFLAGS) $(ERROR_FLAGS) -fno-gnu-keywords -fpascal-strings
    INCLUDES      = -I$(SRCDIR) -I"$(DEVKIT_INCLUDE)"
    DYNLIB_LOCATION = $(MAYA_LOCATION)/MacOS

    LFLAGS  = $(CXX_LIB_FLAG) -fno-gnu-keywords -fpascal-strings  \
              -isysroot $(XCODE_PLATFORM_SDK_PATH) \
              $(ARCH_FLAGS) -headerpad_max_install_names \
              -framework System -framework SystemConfiguration \
              -framework CoreServices -framework Carbon \
              -framework Cocoa -framework ApplicationServices \
              -framework IOKit \
              -bundle

    # When compiling plug-ins for Maya, we make sure to export only the
    # symbols for the initializePlugin(MObject) and
    # uninitializePlugin(MObject) functions. In particular, this
    # prevents the plug-ins from exporting symbols coming from static
    # libaries against which the plug-ins is linked.
    #
    # Here's why:
    #
    # Plug-ins are written by separate developers. Each of them might
    # want to use various libraries to implement their plug-ins. At
    # times, it occurs that plug-ins written by different developers are
    # using different and "incompatible" versions of the same library. To
    # support this, we recommend that plug-ins be linked against static
    # versions of these libraries. And, by hidding the symbols of these
    # libraries, we prevent the two incompatible versions of the library
    # from interferring with each others.
    LFLAGS += -Wl,-exported_symbol,$(INITIALIZE_SYMBOL) \
              -Wl,-exported_symbol,$(UNINITIALIZE_SYMBOL) \
              -Wl,-exported_symbol,_MApiVersion


    LREMAP  = -Wl,-executable_path,"$(DYNLIB_LOCATION)"
    LFLAGS += -L"$(DYNLIB_LOCATION)" $(LREMAP)
    LIBS    =  

    EXT     = bundle

    #Detect current clang xdk and choose correct sdk
    CLANG_VERSION := $(shell gcc --version | grep -o "version [0-9\.]*")
    ifneq ("$(CLANG_VERSION)","$(TARGET_CLANG_VERSION)")
        $(shell sudo xcode-select -s $(XCODE_PATH))
    endif
      


    # Makedepend flags
    #
    # Ignore dependencies on system header files.
    MDFLAGS = -Y

    # Find out if the Qt development tools are installed.
    # we want to use the  qmake file provided by Maya, not the system
    ifneq ($(wildcard $(DEVKIT_LOCATION)/devkit/bin/qmake),)
    #Maya 2017+
            QMAKE = $(DEVKIT_LOCATION)/devkit/bin/qmake
            ifneq ($(QMAKE),)
                 # We want to generate a Makefile, not an xcode project.
                 # QMAKE for 2016/2016.5
                  QMAKE += -spec $(DEVKIT)/mkspecs/macx-clang
             endif
    else
    #Maya 2016, 2016.5
    #qmake wasn't in 2016/2016.5 devkit
            QMAKE = $(shell which qmake 2> /dev/null)
            ifneq ($(QMAKE),)
                # We want to generate a Makefile, not an xcode project.
                # QMAKE for 2016/2016.5
                 QMAKE += -spec macx-g++
            endif
    endif
endif